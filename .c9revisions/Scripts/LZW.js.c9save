{"ts":1343275528246,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//LZW Compression/Decompression for Strings\nvar LZW = {\n    compress: function (uncompressed) {\n        \"use strict\";\n        // Build the dictionary.\n        var i,\n            dictionary = {},\n            c,\n            wc,\n            w = \"\",\n            result = [],\n            dictSize = 256;\n        for (i = 0; i < 256; i += 1) {\n            dictionary[String.fromCharCode(i)] = i;\n        }\n \n        for (i = 0; i < uncompressed.length; i += 1) {\n            c = uncompressed.charAt(i);\n            wc = w + c;\n            if (dictionary[wc]) {\n                w = wc;\n            } else {\n                result.push(dictionary[w]);\n                // Add wc to the dictionary.\n                dictionary[wc] = dictSize++;\n                w = String(c);\n            }\n        }\n \n        // Output the code for w.\n        if (w !== \"\") {\n            result.push(dictionary[w]);\n        }\n        return result;\n    },\n \n \n    decompress: function (compressed) {\n        \"use strict\";\n        // Build the dictionary.\n        var i,\n            dictionary = [],\n            w,\n            result,\n            k,\n            entry = \"\",\n            dictSize = 256;\n        for (i = 0; i < 256; i += 1) {\n            dictionary[i] = String.fromCharCode(i);\n        }\n \n        w = String.fromCharCode(compressed[0]);\n        result = w;\n        for (i = 1; i < compressed.length; i += 1) {\n            k = compressed[i];\n            if (dictionary[k]) {\n                entry = dictionary[k];\n            } else {\n                if (k === dictSize) {\n                    entry = w + w.charAt(0);\n                } else {\n                    return null;\n                }\n            }\n \n            result += entry;\n \n            // Add w+entry[0] to the dictionary.\n            dictionary[dictSize++] = w + entry.charAt(0);\n \n            w = entry;\n        }\n        return result;\n    }\n}, // For Test Purposes\n    //comp = LZW.compress(\"TOBEORNOTTOBEORTOBEORNOT\"),\n    //decomp = LZW.decompress(comp);\n//document.write(comp + '<br>' + decomp);"]],"start1":0,"start2":0,"length1":0,"length2":2056}]],"length":2056}
